
C_Arduino_Asembler_ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  0000022c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000025c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000748  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000068e  00000000  00000000  00000a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ae  00000000  00000000  000010ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  00001368  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c0  00000000  00000000  0000146c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000196  00000000  00000000  0000182c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000019c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  88:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <startConversion>:
	}


	ISR(TIMER0_OVF_VECT) {
		OCR0A = dutyCycle;
	}
  90:	ea e7       	ldi	r30, 0x7A	; 122
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	80 64       	ori	r24, 0x40	; 64
  98:	80 83       	st	Z, r24
  9a:	08 95       	ret

0000009c <setupADC>:
  9c:	85 e4       	ldi	r24, 0x45	; 69
  9e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
  a2:	8f e8       	ldi	r24, 0x8F	; 143
  a4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  a8:	80 e2       	ldi	r24, 0x20	; 32
  aa:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
  ae:	08 95       	ret

000000b0 <init>:
  b0:	80 e4       	ldi	r24, 0x40	; 64
  b2:	8a b9       	out	0x0a, r24	; 10
  b4:	8b b9       	out	0x0b, r24	; 11
  b6:	83 e8       	ldi	r24, 0x83	; 131
  b8:	84 bd       	out	0x24, r24	; 36
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
  c0:	0e 94 4e 00 	call	0x9c	; 0x9c <setupADC>
  c4:	78 94       	sei
  c6:	85 e0       	ldi	r24, 0x05	; 5
  c8:	85 bd       	out	0x25, r24	; 37
  ca:	08 95       	ret

000000cc <main>:
  cc:	0e 94 58 00 	call	0xb0	; 0xb0 <init>
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <main+0x4>

000000d2 <__vector_21>:

	ISR(ADC_vect) {
  d2:	1f 92       	push	r1
  d4:	0f 92       	push	r0
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	0f 92       	push	r0
  da:	11 24       	eor	r1, r1
  dc:	2f 93       	push	r18
  de:	3f 93       	push	r19
  e0:	4f 93       	push	r20
  e2:	5f 93       	push	r21
  e4:	6f 93       	push	r22
  e6:	7f 93       	push	r23
  e8:	8f 93       	push	r24
  ea:	9f 93       	push	r25
  ec:	af 93       	push	r26
  ee:	bf 93       	push	r27
  f0:	ef 93       	push	r30
  f2:	ff 93       	push	r31
		dutyCycle = ADC;
  f4:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  f8:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	0e 94 9d 00 	call	0x13a	; 0x13a <__floatunsisf>
 104:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
 108:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 10c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 110:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
		startConversion();
 114:	0e 94 48 00 	call	0x90	; 0x90 <startConversion>
 118:	ff 91       	pop	r31
 11a:	ef 91       	pop	r30
 11c:	bf 91       	pop	r27
 11e:	af 91       	pop	r26
 120:	9f 91       	pop	r25
 122:	8f 91       	pop	r24
 124:	7f 91       	pop	r23
 126:	6f 91       	pop	r22
 128:	5f 91       	pop	r21
 12a:	4f 91       	pop	r20
 12c:	3f 91       	pop	r19
 12e:	2f 91       	pop	r18
 130:	0f 90       	pop	r0
 132:	0f be       	out	0x3f, r0	; 63
 134:	0f 90       	pop	r0
 136:	1f 90       	pop	r1
 138:	18 95       	reti

0000013a <__floatunsisf>:
 13a:	e8 94       	clt
 13c:	09 c0       	rjmp	.+18     	; 0x150 <__floatsisf+0x12>

0000013e <__floatsisf>:
 13e:	97 fb       	bst	r25, 7
 140:	3e f4       	brtc	.+14     	; 0x150 <__floatsisf+0x12>
 142:	90 95       	com	r25
 144:	80 95       	com	r24
 146:	70 95       	com	r23
 148:	61 95       	neg	r22
 14a:	7f 4f       	sbci	r23, 0xFF	; 255
 14c:	8f 4f       	sbci	r24, 0xFF	; 255
 14e:	9f 4f       	sbci	r25, 0xFF	; 255
 150:	99 23       	and	r25, r25
 152:	a9 f0       	breq	.+42     	; 0x17e <__floatsisf+0x40>
 154:	f9 2f       	mov	r31, r25
 156:	96 e9       	ldi	r25, 0x96	; 150
 158:	bb 27       	eor	r27, r27
 15a:	93 95       	inc	r25
 15c:	f6 95       	lsr	r31
 15e:	87 95       	ror	r24
 160:	77 95       	ror	r23
 162:	67 95       	ror	r22
 164:	b7 95       	ror	r27
 166:	f1 11       	cpse	r31, r1
 168:	f8 cf       	rjmp	.-16     	; 0x15a <__floatsisf+0x1c>
 16a:	fa f4       	brpl	.+62     	; 0x1aa <__floatsisf+0x6c>
 16c:	bb 0f       	add	r27, r27
 16e:	11 f4       	brne	.+4      	; 0x174 <__floatsisf+0x36>
 170:	60 ff       	sbrs	r22, 0
 172:	1b c0       	rjmp	.+54     	; 0x1aa <__floatsisf+0x6c>
 174:	6f 5f       	subi	r22, 0xFF	; 255
 176:	7f 4f       	sbci	r23, 0xFF	; 255
 178:	8f 4f       	sbci	r24, 0xFF	; 255
 17a:	9f 4f       	sbci	r25, 0xFF	; 255
 17c:	16 c0       	rjmp	.+44     	; 0x1aa <__floatsisf+0x6c>
 17e:	88 23       	and	r24, r24
 180:	11 f0       	breq	.+4      	; 0x186 <__floatsisf+0x48>
 182:	96 e9       	ldi	r25, 0x96	; 150
 184:	11 c0       	rjmp	.+34     	; 0x1a8 <__floatsisf+0x6a>
 186:	77 23       	and	r23, r23
 188:	21 f0       	breq	.+8      	; 0x192 <__floatsisf+0x54>
 18a:	9e e8       	ldi	r25, 0x8E	; 142
 18c:	87 2f       	mov	r24, r23
 18e:	76 2f       	mov	r23, r22
 190:	05 c0       	rjmp	.+10     	; 0x19c <__floatsisf+0x5e>
 192:	66 23       	and	r22, r22
 194:	71 f0       	breq	.+28     	; 0x1b2 <__floatsisf+0x74>
 196:	96 e8       	ldi	r25, 0x86	; 134
 198:	86 2f       	mov	r24, r22
 19a:	70 e0       	ldi	r23, 0x00	; 0
 19c:	60 e0       	ldi	r22, 0x00	; 0
 19e:	2a f0       	brmi	.+10     	; 0x1aa <__floatsisf+0x6c>
 1a0:	9a 95       	dec	r25
 1a2:	66 0f       	add	r22, r22
 1a4:	77 1f       	adc	r23, r23
 1a6:	88 1f       	adc	r24, r24
 1a8:	da f7       	brpl	.-10     	; 0x1a0 <__floatsisf+0x62>
 1aa:	88 0f       	add	r24, r24
 1ac:	96 95       	lsr	r25
 1ae:	87 95       	ror	r24
 1b0:	97 f9       	bld	r25, 7
 1b2:	08 95       	ret

000001b4 <_exit>:
 1b4:	f8 94       	cli

000001b6 <__stop_program>:
 1b6:	ff cf       	rjmp	.-2      	; 0x1b6 <__stop_program>
